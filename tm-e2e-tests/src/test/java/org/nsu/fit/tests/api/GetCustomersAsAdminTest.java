package org.nsu.fit.tests.api;

import io.qameta.allure.Feature;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import org.nsu.fit.services.rest.RestClient;
import org.nsu.fit.services.rest.data.AccountTokenPojo;
import org.nsu.fit.services.rest.data.CustomerListType;
import org.nsu.fit.services.rest.data.CustomerPojo;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertFalse;
import static org.testng.Assert.assertTrue;

@Feature("Get customers with admin token")
public class GetCustomersAsAdminTest {

    private static final RestClient restClient = new RestClient();

    private static AccountTokenPojo adminToken;

    @BeforeClass
    public static void setup() {
        adminToken = restClient.authenticate("admin", "setup");
    }

    @Test(description = "Get customers without filter")
    @Severity(SeverityLevel.BLOCKER)
    public void getCustomersTest() {
        CustomerPojo customer = restClient.createAutoGeneratedCustomer(adminToken);

        List<CustomerPojo> result = restClient.get("customers", new CustomerListType(), adminToken, null);

        assertFalse(result.isEmpty());
        boolean b = containsCustomer(result, customer);

        assertTrue(b);
    }

    @Test(description = "Get customers with filter")
    @Severity(SeverityLevel.BLOCKER)
    public void getCustomersWithLoginFilterTest() {
        CustomerPojo customer = restClient.createAutoGeneratedCustomer(adminToken);

        Map<String, List<Object>> queryParams = new HashMap<>();
        queryParams.put("login", Collections.singletonList(customer.login));
        List<CustomerPojo> result = restClient.get("customers", new CustomerListType(), adminToken, queryParams);

        assertEquals(result.size(), 1);
        assertTrue(containsCustomer(result, customer));
    }

    private boolean containsCustomer(List<CustomerPojo> customers, CustomerPojo customerPojo) {
        return customers.stream()
                .anyMatch(c -> c.login.equals(customerPojo.login));
    }

}
