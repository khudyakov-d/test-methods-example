package org.nsu.fit.tests.api;

import io.qameta.allure.Feature;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import org.nsu.fit.services.rest.RestClient;
import org.nsu.fit.services.rest.data.AccountTokenPojo;
import org.nsu.fit.services.rest.data.CustomerPojo;
import org.nsu.fit.services.rest.data.PlanPojo;
import org.nsu.fit.services.rest.data.SubscriptionListType;
import org.nsu.fit.services.rest.data.SubscriptionPojo;
import org.nsu.fit.services.rest.data.TopUpBalancePojo;
import org.nsu.fit.shared.JsonMapper;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.UUID;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotNull;
import static org.testng.Assert.assertThrows;
import static org.testng.Assert.assertTrue;

@Feature("Create and get subscription")
public class CreateAndGetSubscriptionTest {

    private static final RestClient restClient = new RestClient();

    public static final int PLAN_FEE = 1000;
    public static final int BALANCE = 1000;
    public static final String SUBSCRIPTIONS_PATH = "/subscriptions";

    private static AccountTokenPojo adminToken;
    private AccountTokenPojo customerToken;

    private PlanPojo plan;
    private CustomerPojo customer;


    @BeforeClass
    public static void setup() {
        adminToken = restClient.authenticate("admin", "setup");
    }

    @Test(description = "Create plan")
    @Severity(SeverityLevel.BLOCKER)
    public void createValidPlanTest() {
        plan = new PlanPojo();
        plan.name = UUID.randomUUID().toString();
        plan.details = "details";
        plan.fee = PLAN_FEE;

        plan = restClient.post("/plans", JsonMapper.toJson(plan, true), PlanPojo.class, adminToken);
    }

    @Test(description = "Top up customer's balance", dependsOnMethods = "createValidPlanTest")
    @Severity(SeverityLevel.BLOCKER)
    public void topUpBalanceWithNegativeSumTest() {
        customer = restClient.createAutoGeneratedCustomer(adminToken);
        customerToken = restClient.authenticate(customer.login, customer.pass);

        TopUpBalancePojo topUpBalancePojo = new TopUpBalancePojo();
        topUpBalancePojo.customerId = customer.id;
        topUpBalancePojo.money = BALANCE;

        String path = "customers/top_up_balance";
        restClient.post(path, JsonMapper.toJson(topUpBalancePojo, true), Void.class, customerToken);
    }

    @Test(description = "Create subscription", dependsOnMethods = "topUpBalanceWithNegativeSumTest")
    @Severity(SeverityLevel.BLOCKER)
    public void createSubscriptionTest() {
        SubscriptionPojo subscriptionPojo = new SubscriptionPojo();
        subscriptionPojo.customerId = customer.id;
        subscriptionPojo.planId = plan.id;

        SubscriptionPojo savedPlan = restClient.post(
                SUBSCRIPTIONS_PATH, JsonMapper.toJson(subscriptionPojo, true), SubscriptionPojo.class, customerToken);
        assertNotNull(savedPlan.id);
    }

    @Test(description = "Get created subscription", dependsOnMethods = "createSubscriptionTest")
    @Severity(SeverityLevel.BLOCKER)
    public void getCreatedSubscriptionTest() {
        HashMap<String, List<Object>> params = new HashMap<>();
        params.put("customer_id", Collections.singletonList(customer.id.toString()));
        List<SubscriptionPojo> customerSubscriptions = restClient.get(
                SUBSCRIPTIONS_PATH, new SubscriptionListType(), adminToken, params);

        assertEquals(customerSubscriptions.size(), 1);
        assertEquals(customerSubscriptions.get(0).planName, plan.name);
        assertEquals((int) customerSubscriptions.get(0).planFee, plan.fee);
    }

}
